/*
 * Copyright (c) 2011 Samsung Electronics Co., Ltd All Rights Reserved
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
/**
 * This class simply redirects the access requests to access control engine.
 * The aim is to hide access control engine specific details from WRT modules.
 * It also implements WRT_INTERFACE.h interfaces, so that ACE could access
 * WRT specific and other information during the decision making.
 *
 * @file    security_controller.h
 * @author  Przemyslaw Dobrowolski (p.dobrowolsk@samsung.com)
 * @author  Ming Jin(ming79.jin@samsung.com)
 * @version 1.0
 * @brief   Header file for security controller
 */
#ifndef SECURITY_CONTROLLER_H
#define SECURITY_CONTROLLER_H

#include <dpl/singleton.h>
#include <dpl/event/controller.h>
#include <dpl/generic_event.h>
#include <dpl/type_list.h>
#include <string>
#include <ace-dao-ro/PreferenceTypes.h>
#include <ace/AbstractPolicyEnforcementPoint.h>
#include <ace-dao-ro/PromptModel.h>
#include <string>
#include <dpl/event/inter_context_delegate.h>

namespace Jobs {
class Job;
}

namespace SecurityControllerEvents {
DECLARE_GENERIC_EVENT_0(InitializeSyncEvent)
DECLARE_GENERIC_EVENT_0(TerminateSyncEvent)
DECLARE_GENERIC_EVENT_0(UpdatePolicySyncEvent)

DECLARE_GENERIC_EVENT_2(CheckFunctionCallSyncEvent,
                        PolicyResult *,
                        Request *
                       )

DECLARE_GENERIC_EVENT_3(CheckRuntimeCallSyncEvent,
                        PolicyResult *,
                        Request *,
                        std::string //sessionId
                       )

DECLARE_GENERIC_EVENT_5(ValidatePopupResponseEvent,
                        Request *,
                        bool, //is allowed
                        Prompt::Validity,
                        std::string, //sessionId
                        bool* //check return value
                       )

} // namespace SecurityControllerEvents

typedef DPL::TypeListDecl<
    SecurityControllerEvents::InitializeSyncEvent,
    SecurityControllerEvents::TerminateSyncEvent,
    SecurityControllerEvents::UpdatePolicySyncEvent,
    SecurityControllerEvents::ValidatePopupResponseEvent,
    SecurityControllerEvents::CheckRuntimeCallSyncEvent,
    SecurityControllerEvents::CheckFunctionCallSyncEvent>::Type
SecurityControllerEventsTypeList;

class SecurityController :
        public DPL::Event::Controller<SecurityControllerEventsTypeList>
{
  protected:
    virtual void OnEventReceived(
            const SecurityControllerEvents::InitializeSyncEvent &event);
    virtual void OnEventReceived(
            const SecurityControllerEvents::UpdatePolicySyncEvent &event);
    virtual void OnEventReceived(
            const SecurityControllerEvents::ValidatePopupResponseEvent &e);
    virtual void OnEventReceived(
            const SecurityControllerEvents::TerminateSyncEvent &event);
    virtual void OnEventReceived(
            const SecurityControllerEvents::CheckFunctionCallSyncEvent &e);
    virtual void OnEventReceived(
            const SecurityControllerEvents::CheckRuntimeCallSyncEvent &e);

  private:
    class Impl;
    std::unique_ptr<Impl> m_impl;

    SecurityController();
    //This desctructor must be in implementation file (cannot be autogenerated)
    ~SecurityController();

    friend class DPL::Singleton<SecurityController>;
};

typedef DPL::Singleton<SecurityController> SecurityControllerSingleton;

#endif // SECURITY_CONTROLLER_H
